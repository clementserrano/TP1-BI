package routines;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class transformation {

    /**
     * GpAge
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} int age
     * 
     * {example} GpAge(12) # "3-18 ans" !.
     */
    public static String GpAge(int age) {
    	String resultat;
        if (age < 3) {
        	resultat = "3 ans";
        }else if (age >= 3 && age <= 18){
        	resultat = "3-18 ans";
        }else if (age > 18 && age <= 30){
        	resultat = "19-30 ans";
        }else if (age > 30 && age <= 60){
        	resultat = "30-60 ans";
        }else{
        	resultat = ">60 ans";
        }
        
        return resultat;
    }
    
    /**
     * GpJour
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} int
     * 
     * {example} GpJour(01-01-2009) # "Vendredi" !.
     */
    public static String GpJour(int dayOfWeek) {
    	String resultat;
        switch(dayOfWeek){
	        case 1: resultat = "Lundi"; break;
	        case 2: resultat = "Mardi"; break;
	        case 3: resultat = "Mercredi"; break;
	        case 4: resultat = "Jeudi"; break;
	        case 5: resultat = "Vendredi"; break;
	        case 6: resultat = "Samedi"; break;
	        case 7: resultat = "Dimanche"; break;
	        default: resultat = "Erreur : "+dayOfWeek; break;
        }
        return resultat;
    }
    
    /**
     * GpMois
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} int
     * 
     * {example} GpMois(01-01-2009) # "Janvier" !.
     */
    public static String GpMois(int month) {
    	String resultat;
        switch(month){
	        case 0: resultat = "Janvier"; break;
	        case 1: resultat = "Février"; break;
	        case 2: resultat = "Mars"; break;
	        case 3: resultat = "Avril"; break;
	        case 4: resultat = "Mai"; break;
	        case 5: resultat = "Juin"; break;
	        case 6: resultat = "Juillet"; break;
	        case 7: resultat = "Août"; break;
	        case 8: resultat = "Septembre"; break;
	        case 9: resultat = "Octobre"; break;
	        case 10: resultat = "Novembre"; break;
	        case 11: resultat = "Décembre"; break;
	        default: resultat = "Erreur : "+month; break;
        }
        return resultat;
    }
    
    /**
     * GpSaison
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} String
     * 
     * {example} GpSaison(01-01-2009) # "Hiver" !.
     */
    public static String GpSaison(Date date) {
    	String resultat = "";
    	SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
    	
    	try {
	    	Calendar cal = Calendar.getInstance();
	    	cal.setTime(date);
	    	int year = cal.get(Calendar.YEAR);
    	
			Date hiver = sdf.parse("21-12-"+year);
			Date printemps = sdf.parse("21-03-"+year);
			Date ete = sdf.parse("21-06-"+year);
			Date automne = sdf.parse("21-09-"+year);
			
			if(date.before(printemps)){
	    		resultat = "Hiver";
	    	}else if(date.compareTo(printemps) == 0 || date.before(ete)){
	    		resultat = "Printemps";
	    	}else if(date.compareTo(ete) == 0 || date.before(automne)){
	    		resultat = "Eté";
	    	}else if(date.compareTo(automne) == 0 || date.before(hiver)){
	    		resultat = "Automne";
	    	}else{
	    		resultat = "Erreur : " + sdf.format(date);
	    	}
		} catch (ParseException e) {
			resultat = e.getLocalizedMessage();
		}
    	
        return resultat;
    }
    
    /**
     * GpDate
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} int anee, int mois, int jour
     * 
     * {example} GpDate(2009,1,1) # "01-01-2009" !.
     */
    public static Date GpDate(int annee, int mois, int jour) {
    	String resultat = "";
    	SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
    	
    	Calendar cal = Calendar.getInstance();
    	cal.set(annee, mois - 1, jour);
    	Date date = cal.getTime();
    	resultat = sdf.format(date);    	
    	
    	try{
    		return sdf.parse(resultat);
    	}catch(ParseException e){
    		System.out.println(e.getMessage());
    		try{
    			return sdf.parse("01-01-2009");
    		}catch(ParseException e1){
    			e1.printStackTrace();
    			return null;
    		}
    	}
    }
    
    /**
     * GpDpt
     * 
     * 
     * {talendTypes} int
     * 
     * {Category} User Defined
     * 
     * {param} int
     * 
     * {example} GpDpt(31990) # "31" !.
     */
    public static int GpDpt(int codePostal) {
    	String code = codePostal+"";
    	if(code.length() == 4){
    		code = "0" + code;
    	}
    	return Integer.valueOf(code.substring(0,2));
    }
    
    /**
     * GpDptStr
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} int
     * 
     * {example} GpDpt(31990) # "31" !.
     */
    public static String GpDptStr(int codePostal) {
    	String code = codePostal+"";
    	if(code.length() == 4){
    		code = "0" + code;
    	}
    	if(code.length() >= 2){
    		return code.substring(0,2);
    	}else{
    		return code;
    	}
    }
    
    /**
     * GpDptStrInt
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} int
     * 
     * {example} GpDpt(1990) # "1" !.
     */
    public static String GpDptStrInt(int codePostal) {
    	String code = codePostal+"";
    	if(code.length() > 4){
    		return code.substring(0,2);
    	}else{
    		return code.substring(0,1);
    	}
    }
    
    /**
     * GpDate2
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} int anee, int mois, int jour
     * 
     * {example} GpDate(2009,1,1) # "01/01/2009" !.
     */
    public static Date GpDate2(int annee, int mois, int jour) {
    	String resultat = "";
    	SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    	
    	Calendar cal = Calendar.getInstance();
    	cal.set(annee, mois - 1, jour);
    	Date date = cal.getTime();
    	resultat = sdf.format(date);    	
    	
    	try{
    		return sdf.parse(resultat);
    	}catch(ParseException e){
    		System.out.println(e.getMessage());
    		try{
    			return sdf.parse("01/01/2009");
    		}catch(ParseException e1){
    			e1.printStackTrace();
    			return null;
    		}
    	}
    }
}
